Chapter 1
1. Only dealing w/ numbers to focus on rules for building procedures
2. Expressions
  a. Type an expression => interpreter evaluates expression
   + one type of primitive  expression is num
    - 486 ;=> 486
   + application of primitive procedure (e.g. * - +) to two primitives makes compound expression
    - (* 5 4) ;=> 20
  |prefix notation
  |operand  operators
        \   / /
        (* 5 4)
   + The value of a combination is obtained by applying the procedure specified 
   by the operator to the arguments that are the values of the operands.

   (+ 21 35 12 7) ;=> 75 can use arbitrary  # of args

   + the entire combination is delimited by the parentheses

   (+ (* 3 5) (- 10 6)) ;=>19

   (+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6)) ;=> 57
   -or-

   + pretty-printing
   (+ (* 3
      (+ (* 2 4)
         (+ 3 5)))
   (+ (- 10 7)
      6)) ;=> 57
 

    + the interpreter runs in a read-eval-print loop (repl)
1.1.2
    + critical point: the name identifies a variable whose value is the object

    + Lisp: name things with define

    (define size 2)

    + interpreter associates VALUE 2 with NAME size

    size ;=> 2

    (* 5 size) ;=> 10

    (define pi 3.14159)
    (define radius 10)

    (* pi (* radius radius)) ;=> 314.159

    (define circumference (* 2 pi radius))

    circumference ;=> 62.8318

    + Define is our language’s simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the circumference computed above.

    + complex programs are constructed by building, step by step, computational objects of increasing complexity

    + step-by-step: name-object associations can be created incrementally in successive interactions

    +Lisp program usually consists of a large number of relatively simple procedures

    + interpreter keeps name-object pairs in GLOBAL ENVIRONMENT (memory)

    RULE
    To evaluate a combination, do the following:

	Evaluate the subexpressions of the combination.
	Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands).

	+ tree accumulation as part of eval rule

        390______
       /  \      \
      |   |       15     
      *  26   / \ \ \
       / | \  + 3 5 7
       * 4 6

     2nd RULE
- We take care of the primitive cases by stipulating that:
+ the values of numerals are the numbers that they name,
+ the values of built-in operators are the machine instruction sequences that carry out the corresponding operations, and
+ the values of other names are the objects associated with those names in the environment.  

+ symbols such as + and * are also included in the global environment, and are associated with the sequences of machine instructions that are their “values.”

+ special forms: define is included as it does not conform to eval rule above

(define x 3)

- Elements of language so far:
+Numbers and arithmetic operations are primitive data and procedures.
+Nesting of combinations provides a means of combining operations.
+Definitions that associate names with values provide a limited means of abstraction
1.1.4
    + procedure definitions:

    (define (square x) (* x x))

    EXAMPLE (Compound Procedure)
    (define (square x)    (*       x       x))
      |      |      |      |       |       |
     To square something, multiply it by itself.
    (2 notions: procedure to multiply a thing by itself AND a name being given to the procedure)
    + The procedure represents the operation of multiplying something by itself. The thing to be multiplied is given a local name, x, which plays the same role that a pronoun plays in natural language. Evaluating the definition creates this compound procedure and associates it with the name square

    + The general form of a procedure definition is

    (define (⟨name⟩ ⟨formal parameters⟩) ⟨body⟩)

    (define (sum-of-squares x y)
      (+ (square x) (square y)))

     (sum-of-squares 3 4) ;=> 25

     + Now we can use sum-of-squares as a building block in constructing further procedures:

     (define (f a)       ;x       ;y
       (sum-of-squares (+ a 1) (* a 2)))

     (f 5) ;=>136

     + Compound procedures are used in exactly the same way as primitive procedures. Indeed, one could not tell 
     by looking at the definition of sum-of-squares given above whether square was built into the interpreter, like + and *, or defined as a compound procedure.
    
     [Substitution Model]
     (+ (* 6 6) (* 10 10))
     which reduces by multiplication to
     (+ 36 100)
     and finally to
     136

     + The substitution model is only the first of these models—a way to get started thinking formally about the evaluation process.
     
     (sum-of-squares (+ 5 1) (* 5 2))

     (+ (square (+ 5 1)) 
        (square (* 5 2)))

     (+ (* (+ 5 1) (+ 5 1)) 
        (* (* 5 2) (* 5 2)))
     followed by the reductions

     (+ (* 6 6) 
        (* 10 10))

     (+ 36 100)

     136
1.15
     + conditional

     (define (abs x)
       (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))
     + This alternative “fully expand and then reduce” evaluation method is known as normal-order evaluation,
     in contrast to the “evaluate the arguments and then apply” method that the interpreter actually uses, which is called applicative-order evaluation.