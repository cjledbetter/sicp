Chapter 1
1. Only dealing w/ numbers to focus on rules for building procedures
2. Expressions
  a. Type an expression => interpreter evaluates expression
   + one type of primitive  expression is num
    - 486 ;=> 486
   + application of primitive procedure (e.g. * - +) to two primitives makes compound expression
    - (* 5 4) ;=> 20
  |prefix notation
  |operand  operators
        \   / /
        (* 5 4)
   + The value of a combination is obtained by applying the procedure specified 
   by the operator to the arguments that are the values of the operands.

   (+ 21 35 12 7) ;=> 75 can use arbitrary  # of args

   + the entire combination is delimited by the parentheses

   (+ (* 3 5) (- 10 6)) ;=>19

   (+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6)) ;=> 57
   -or-

   + pretty-printing
   (+ (* 3
      (+ (* 2 4)
         (+ 3 5)))
   (+ (- 10 7)
      6)) ;=> 57
 

    + the interpreter runs in a read-eval-print loop (repl)
1.1.2
    + critical point: the name identifies a variable whose value is the object

    + Lisp: name things with define

    (define size 2)

    + interpreter associates VALUE 2 with NAME size

    size ;=> 2

    (* 5 size) ;=> 10

    (define pi 3.14159)
    (define radius 10)

    (* pi (* radius radius)) ;=> 314.159

    (define circumference (* 2 pi radius))

    circumference ;=> 62.8318

    + Define is our languageâ€™s simplest means of abstraction, for it allows us to use simple names to refer to the results of compound operations, such as the circumference computed above.

    + complex programs are constructed by building, step by step, computational objects of increasing complexity

    + step-by-step: name-object associations can be created incrementally in successive interactions

    +Lisp program usually consists of a large number of relatively simple procedures

    + interpreter keeps name-object pairs in GLOBAL ENVIRONMENT (memory)

    RULE
    To evaluate a combination, do the following:

	Evaluate the subexpressions of the combination.
	Apply the procedure that is the value of the leftmost subexpression (the operator) to the arguments that are the values of the other subexpressions (the operands).

	+ tree accumulation as part of eval rule



        390______
       /  \      \
      |   |       15     
      *  26   / \ \ \
       / | \  + 3 5 7
       * 4 6
       

